import { LimitOrderManager } from 'src/features/limit-order/limit-order-manager';
import { SDK } from 'src/core/sdk/sdk';
import { sdkConfiguration } from '__tests__/api-tests/limit-order/constants/sdk-configuration';
import { BLOCKCHAIN_NAME } from 'src/core/blockchain/models/blockchain-name';
import { orderParsed, userAddress } from '__tests__/api-tests/limit-order/constants/user-data';
import { Any } from 'src/common/utils/types';

describe('Limit Order Manager integration tests', () => {
    let manager: LimitOrderManager;

    beforeEach(async () => {
        await SDK.createSDK(sdkConfiguration);

        manager = new LimitOrderManager();
        jest.spyOn(manager as Any, 'walletAddress', 'get').mockReturnValue(userAddress);
        jest.spyOn(manager as Any, 'web3Private', 'get').mockReturnValue({
            web3: manager['getWeb3Public'](BLOCKCHAIN_NAME.POLYGON)['web3'],
            checkBlockchainCorrect: () => Promise.resolve(true)
        });
    });

    test('Get cancel call data', async () => {
        const callData = await manager['getCancelCallData'](
            BLOCKCHAIN_NAME.POLYGON,
            orderParsed.hash
        );
        expect(callData).toBe(
            '0x2d9a56f60000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000ca627029cf0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000011738d36b166c4f18028fe2fa28050fdbd91c4300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000989680000000a4000000a4000000a4000000a400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000a4bf15fcd8000000000000000000000000a5eb255ef45dfb48b5d133d08833def69871691d000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000242cc2878d050bde8da00000000000000011738d36b166c4f18028fe2fa28050fdbd91c4300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
        );
    });

    test('Get error, trying to get cancel call data, due to invalid hash', async () => {
        await expect(
            manager['getCancelCallData'](BLOCKCHAIN_NAME.POLYGON, `${orderParsed.hash}_invalid`)
        ).rejects.toThrow();
    });

    test('Get fill call data', async () => {
        const callData = await manager['getFillCallData'](
            BLOCKCHAIN_NAME.POLYGON,
            orderParsed.hash,
            '1'
        );
        expect(callData).toBe(
            '0x62e238bb00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ca627029cf0000000000000000000000002791bca1f2de4661ed88a30c99a7a9449aa84174000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000011738d36b166c4f18028fe2fa28050fdbd91c4300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000989680000000a4000000a4000000a4000000a400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000a4bf15fcd8000000000000000000000000a5eb255ef45dfb48b5d133d08833def69871691d000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000242cc2878d050bde8da00000000000000011738d36b166c4f18028fe2fa28050fdbd91c430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000412632a07086e9dde0a79882a89644c68ff50f364d4f7d485fefdd55310ff7b38d0001ef98a56cba829939456f2b96b890d9b8a49395232ca5a82b53b0c919e5641c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
        );
    });

    test('Get error, trying to get fill call data, due to invalid hash', async () => {
        await expect(
            manager['getFillCallData'](BLOCKCHAIN_NAME.POLYGON, `${orderParsed.hash}_invalid`, '1')
        ).rejects.toThrow();
    });
});
